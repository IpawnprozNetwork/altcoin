{"ast":null,"code":"var _jsxFileName = \"D:\\\\Carlosverbelen.online\\\\token\\\\src\\\\components\\\\Wallet.js\",\n  _s = $RefreshSig$();\n// src/components/Wallet.js\nimport React, { useEffect, useState } from 'react';\nimport { Connection, PublicKey, Transaction } from '@solana/web3.js';\nimport { useWallet, WalletProvider, ConnectionProvider } from '@solana/wallet-adapter-react';\nimport { PhantomWalletAdapter } from '@solana/wallet-adapter-wallets';\nimport { WalletModalProvider, WalletMultiButton } from '@solana/wallet-adapter-react-ui';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Wallet = () => {\n  _s();\n  const {\n    publicKey,\n    sendTransaction\n  } = useWallet();\n  const [connection, setConnection] = useState(null);\n  useEffect(() => {\n    const conn = new Connection('https://api.mainnet-beta.solana.com');\n    setConnection(conn);\n  }, []);\n  const handlePurchase = async () => {\n    if (!publicKey || !connection) return;\n    const tokenMintAddress = new PublicKey('ERi5yvhMiUUV7rp3dDmVdqDBNJgA8pvrwnBy64QEmoon'); // Your token's mint address\n\n    // Logic to create the transaction for token purchase will go here.\n    const transaction = new Transaction();\n\n    // Add instructions for token transfer or purchase here (use @solana/web3.js)\n\n    const signature = await sendTransaction(transaction, connection);\n    console.log('Transaction Signature: ', signature);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Your Wallet Address: \", publicKey ? publicKey.toBase58() : 'Not connected']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(WalletMultiButton, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handlePurchase,\n      disabled: !publicKey,\n      children: \"Buy Token\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(Wallet, \"WUiECjpzrcdjmjLWUq++AXjkC8Q=\", false, function () {\n  return [useWallet];\n});\n_c = Wallet;\nexport default Wallet;\nvar _c;\n$RefreshReg$(_c, \"Wallet\");","map":{"version":3,"names":["React","useEffect","useState","Connection","PublicKey","Transaction","useWallet","WalletProvider","ConnectionProvider","PhantomWalletAdapter","WalletModalProvider","WalletMultiButton","jsxDEV","_jsxDEV","Wallet","_s","publicKey","sendTransaction","connection","setConnection","conn","handlePurchase","tokenMintAddress","transaction","signature","console","log","children","toBase58","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["D:/Carlosverbelen.online/token/src/components/Wallet.js"],"sourcesContent":["// src/components/Wallet.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Connection, PublicKey, Transaction } from '@solana/web3.js';\r\nimport { useWallet, WalletProvider, ConnectionProvider } from '@solana/wallet-adapter-react';\r\nimport { PhantomWalletAdapter } from '@solana/wallet-adapter-wallets';\r\nimport { WalletModalProvider, WalletMultiButton } from '@solana/wallet-adapter-react-ui';\r\n\r\nconst Wallet = () => {\r\n  const { publicKey, sendTransaction } = useWallet();\r\n  const [connection, setConnection] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const conn = new Connection('https://api.mainnet-beta.solana.com');\r\n    setConnection(conn);\r\n  }, []);\r\n\r\n  const handlePurchase = async () => {\r\n    if (!publicKey || !connection) return;\r\n\r\n    const tokenMintAddress = new PublicKey('ERi5yvhMiUUV7rp3dDmVdqDBNJgA8pvrwnBy64QEmoon'); // Your token's mint address\r\n\r\n    // Logic to create the transaction for token purchase will go here.\r\n    const transaction = new Transaction();\r\n\r\n    // Add instructions for token transfer or purchase here (use @solana/web3.js)\r\n\r\n    const signature = await sendTransaction(transaction, connection);\r\n    console.log('Transaction Signature: ', signature);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Your Wallet Address: {publicKey ? publicKey.toBase58() : 'Not connected'}</h2>\r\n      <WalletMultiButton />\r\n      <button onClick={handlePurchase} disabled={!publicKey}>Buy Token</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Wallet;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,UAAU,EAAEC,SAAS,EAAEC,WAAW,QAAQ,iBAAiB;AACpE,SAASC,SAAS,EAAEC,cAAc,EAAEC,kBAAkB,QAAQ,8BAA8B;AAC5F,SAASC,oBAAoB,QAAQ,gCAAgC;AACrE,SAASC,mBAAmB,EAAEC,iBAAiB,QAAQ,iCAAiC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzF,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM;IAAEC,SAAS;IAAEC;EAAgB,CAAC,GAAGX,SAAS,CAAC,CAAC;EAClD,MAAM,CAACY,UAAU,EAAEC,aAAa,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAElDD,SAAS,CAAC,MAAM;IACd,MAAMmB,IAAI,GAAG,IAAIjB,UAAU,CAAC,qCAAqC,CAAC;IAClEgB,aAAa,CAACC,IAAI,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI,CAACL,SAAS,IAAI,CAACE,UAAU,EAAE;IAE/B,MAAMI,gBAAgB,GAAG,IAAIlB,SAAS,CAAC,8CAA8C,CAAC,CAAC,CAAC;;IAExF;IACA,MAAMmB,WAAW,GAAG,IAAIlB,WAAW,CAAC,CAAC;;IAErC;;IAEA,MAAMmB,SAAS,GAAG,MAAMP,eAAe,CAACM,WAAW,EAAEL,UAAU,CAAC;IAChEO,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEF,SAAS,CAAC;EACnD,CAAC;EAED,oBACEX,OAAA;IAAAc,QAAA,gBACEd,OAAA;MAAAc,QAAA,GAAI,uBAAqB,EAACX,SAAS,GAAGA,SAAS,CAACY,QAAQ,CAAC,CAAC,GAAG,eAAe;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAClFnB,OAAA,CAACF,iBAAiB;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACrBnB,OAAA;MAAQoB,OAAO,EAAEZ,cAAe;MAACa,QAAQ,EAAE,CAAClB,SAAU;MAAAW,QAAA,EAAC;IAAS;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtE,CAAC;AAEV,CAAC;AAACjB,EAAA,CA9BID,MAAM;EAAA,QAC6BR,SAAS;AAAA;AAAA6B,EAAA,GAD5CrB,MAAM;AAgCZ,eAAeA,MAAM;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}