{"ast":null,"code":"var _jsxFileName = \"D:\\\\Carlosverbelen.online\\\\token\\\\src\\\\components\\\\Wallet.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { PublicKey, Transaction, SystemProgram, Connection } from '@solana/web3.js';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Wallet = () => {\n  _s();\n  const {\n    publicKey,\n    sendTransaction\n  } = useWallet(); // Wallet provider hook\n  const [recipientPublicKey, setRecipientPublicKey] = useState('');\n  const [amount, setAmount] = useState('');\n  useEffect(() => {\n    // You can set recipientPublicKey dynamically if needed or from a form\n    setRecipientPublicKey('RECIPIENT_PUBLIC_KEY'); // Replace with your recipient public key\n  }, []);\n  const handleSendTransaction = async () => {\n    if (!publicKey || !recipientPublicKey || !amount) {\n      alert('Please fill in all fields!');\n      return;\n    }\n    const senderPublicKey = publicKey;\n    const recipient = new PublicKey(recipientPublicKey);\n    const connection = new Connection('https://api.mainnet-beta.solana.com', 'confirmed');\n    const transaction = new Transaction().add(SystemProgram.transfer({\n      fromPubkey: senderPublicKey,\n      toPubkey: recipient,\n      lamports: parseFloat(amount) * 1000000000 // Convert SOL to lamports\n    }));\n    try {\n      const signature = await sendTransaction(transaction, connection);\n      await connection.confirmTransaction(signature, 'processed');\n      alert('Transaction successful!');\n    } catch (error) {\n      console.error('Transaction failed:', error);\n      alert('Transaction failed. Please try again.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Send Solana Transaction\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Recipient Public Key:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: recipientPublicKey,\n          onChange: e => setRecipientPublicKey(e.target.value),\n          placeholder: \"Recipient Public Key\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Amount (in SOL):\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: amount,\n          onChange: e => setAmount(e.target.value),\n          placeholder: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSendTransaction,\n      children: \"Send Transaction\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(Wallet, \"3ixXHjIU9dkm3bAgK03tXrDKEuI=\", false, function () {\n  return [useWallet];\n});\n_c = Wallet;\nexport default Wallet;\nvar _c;\n$RefreshReg$(_c, \"Wallet\");","map":{"version":3,"names":["React","useEffect","useState","PublicKey","Transaction","SystemProgram","Connection","useWallet","jsxDEV","_jsxDEV","Wallet","_s","publicKey","sendTransaction","recipientPublicKey","setRecipientPublicKey","amount","setAmount","handleSendTransaction","alert","senderPublicKey","recipient","connection","transaction","add","transfer","fromPubkey","toPubkey","lamports","parseFloat","signature","confirmTransaction","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["D:/Carlosverbelen.online/token/src/components/Wallet.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { PublicKey, Transaction, SystemProgram, Connection } from '@solana/web3.js';\r\nimport { useWallet } from '@solana/wallet-adapter-react';\r\n\r\nconst Wallet = () => {\r\n  const { publicKey, sendTransaction } = useWallet();  // Wallet provider hook\r\n  const [recipientPublicKey, setRecipientPublicKey] = useState('');\r\n  const [amount, setAmount] = useState('');\r\n\r\n  useEffect(() => {\r\n    // You can set recipientPublicKey dynamically if needed or from a form\r\n    setRecipientPublicKey('RECIPIENT_PUBLIC_KEY'); // Replace with your recipient public key\r\n  }, []);\r\n\r\n  const handleSendTransaction = async () => {\r\n    if (!publicKey || !recipientPublicKey || !amount) {\r\n      alert('Please fill in all fields!');\r\n      return;\r\n    }\r\n\r\n    const senderPublicKey = publicKey;\r\n    const recipient = new PublicKey(recipientPublicKey);\r\n    const connection = new Connection('https://api.mainnet-beta.solana.com', 'confirmed');\r\n\r\n    const transaction = new Transaction().add(\r\n      SystemProgram.transfer({\r\n        fromPubkey: senderPublicKey,\r\n        toPubkey: recipient,\r\n        lamports: parseFloat(amount) * 1000000000, // Convert SOL to lamports\r\n      })\r\n    );\r\n\r\n    try {\r\n      const signature = await sendTransaction(transaction, connection);\r\n      await connection.confirmTransaction(signature, 'processed');\r\n      alert('Transaction successful!');\r\n    } catch (error) {\r\n      console.error('Transaction failed:', error);\r\n      alert('Transaction failed. Please try again.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Send Solana Transaction</h2>\r\n      <div>\r\n        <label>\r\n          Recipient Public Key:\r\n          <input\r\n            type=\"text\"\r\n            value={recipientPublicKey}\r\n            onChange={(e) => setRecipientPublicKey(e.target.value)}\r\n            placeholder=\"Recipient Public Key\"\r\n          />\r\n        </label>\r\n      </div>\r\n      <div>\r\n        <label>\r\n          Amount (in SOL):\r\n          <input\r\n            type=\"number\"\r\n            value={amount}\r\n            onChange={(e) => setAmount(e.target.value)}\r\n            placeholder=\"Amount\"\r\n          />\r\n        </label>\r\n      </div>\r\n      <button onClick={handleSendTransaction}>Send Transaction</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Wallet;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}