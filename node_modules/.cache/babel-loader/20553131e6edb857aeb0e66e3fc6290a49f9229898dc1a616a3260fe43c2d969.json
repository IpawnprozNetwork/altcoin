{"ast":null,"code":"var _jsxFileName = \"D:\\\\Carlosverbelen.online\\\\token\\\\src\\\\components\\\\Wallet.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Connection, PublicKey, Transaction, SystemProgram, sendAndConfirmTransaction } from '@solana/web3.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Wallet = ({\n  mintAddress\n}) => {\n  _s();\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [connected, setConnected] = useState(false);\n  const [amount, setAmount] = useState(1); // Default amount to buy 1 token\n\n  const connection = new Connection(clusterApiUrl('mainnet-beta'), 'confirmed'); // Using mainnet\n\n  const checkPhantomWallet = () => {\n    if (window.solana && window.solana.isPhantom) {\n      return true;\n    }\n    return false;\n  };\n  const connectWallet = async () => {\n    if (checkPhantomWallet()) {\n      try {\n        const response = await window.solana.connect();\n        setWalletAddress(response.publicKey.toString());\n        setConnected(true);\n      } catch (err) {\n        console.error('Failed to connect to wallet', err);\n      }\n    } else {\n      alert('Please install Phantom wallet.');\n    }\n  };\n  const disconnectWallet = () => {\n    setWalletAddress(null);\n    setConnected(false);\n  };\n  const handleBuyToken = async () => {\n    if (!walletAddress) {\n      alert('Please connect your wallet first');\n      return;\n    }\n\n    // Create transaction to buy token (send SOL to mint address)\n    const transaction = new Transaction().add(SystemProgram.transfer({\n      fromPubkey: new PublicKey(walletAddress),\n      toPubkey: new PublicKey(mintAddress),\n      lamports: 1000000000 * amount // Amount in lamports (1 SOL = 1 billion lamports)\n    }));\n    try {\n      // Send and confirm the transaction\n      const signature = await sendAndConfirmTransaction(connection, transaction, [window.solana]);\n      alert(`Transaction successful! Signature: ${signature}`);\n    } catch (err) {\n      console.error('Transaction failed:', err);\n      alert('Transaction failed. Please try again.');\n    }\n  };\n  useEffect(() => {\n    if (checkPhantomWallet()) {\n      window.solana.on('connect', publicKey => {\n        setWalletAddress(publicKey.toString());\n        setConnected(true);\n      });\n      window.solana.on('disconnect', () => {\n        setWalletAddress(null);\n        setConnected(false);\n      });\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: connected ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Your Wallet Address: \", walletAddress]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: disconnectWallet,\n        children: \"Disconnect Wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: amount,\n          onChange: e => setAmount(e.target.value),\n          min: \"1\",\n          placeholder: \"Amount to buy\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleBuyToken,\n          children: \"Buy Token\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: connectWallet,\n        children: \"Select Wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n_s(Wallet, \"NOdxR1aPpnDYY7owP7vblQAr8Zc=\");\n_c = Wallet;\nexport default Wallet;\nvar _c;\n$RefreshReg$(_c, \"Wallet\");","map":{"version":3,"names":["React","useState","useEffect","Connection","PublicKey","Transaction","SystemProgram","sendAndConfirmTransaction","jsxDEV","_jsxDEV","Wallet","mintAddress","_s","walletAddress","setWalletAddress","connected","setConnected","amount","setAmount","connection","clusterApiUrl","checkPhantomWallet","window","solana","isPhantom","connectWallet","response","connect","publicKey","toString","err","console","error","alert","disconnectWallet","handleBuyToken","transaction","add","transfer","fromPubkey","toPubkey","lamports","signature","on","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","value","onChange","e","target","min","placeholder","_c","$RefreshReg$"],"sources":["D:/Carlosverbelen.online/token/src/components/Wallet.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Connection, PublicKey, Transaction, SystemProgram, sendAndConfirmTransaction } from '@solana/web3.js';\r\n\r\nconst Wallet = ({ mintAddress }) => {\r\n  const [walletAddress, setWalletAddress] = useState(null);\r\n  const [connected, setConnected] = useState(false);\r\n  const [amount, setAmount] = useState(1); // Default amount to buy 1 token\r\n\r\n  const connection = new Connection(clusterApiUrl('mainnet-beta'), 'confirmed'); // Using mainnet\r\n\r\n  const checkPhantomWallet = () => {\r\n    if (window.solana && window.solana.isPhantom) {\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  const connectWallet = async () => {\r\n    if (checkPhantomWallet()) {\r\n      try {\r\n        const response = await window.solana.connect();\r\n        setWalletAddress(response.publicKey.toString());\r\n        setConnected(true);\r\n      } catch (err) {\r\n        console.error('Failed to connect to wallet', err);\r\n      }\r\n    } else {\r\n      alert('Please install Phantom wallet.');\r\n    }\r\n  };\r\n\r\n  const disconnectWallet = () => {\r\n    setWalletAddress(null);\r\n    setConnected(false);\r\n  };\r\n\r\n  const handleBuyToken = async () => {\r\n    if (!walletAddress) {\r\n      alert('Please connect your wallet first');\r\n      return;\r\n    }\r\n\r\n    // Create transaction to buy token (send SOL to mint address)\r\n    const transaction = new Transaction().add(\r\n      SystemProgram.transfer({\r\n        fromPubkey: new PublicKey(walletAddress),\r\n        toPubkey: new PublicKey(mintAddress),\r\n        lamports: 1000000000 * amount, // Amount in lamports (1 SOL = 1 billion lamports)\r\n      })\r\n    );\r\n\r\n    try {\r\n      // Send and confirm the transaction\r\n      const signature = await sendAndConfirmTransaction(connection, transaction, [window.solana]);\r\n      alert(`Transaction successful! Signature: ${signature}`);\r\n    } catch (err) {\r\n      console.error('Transaction failed:', err);\r\n      alert('Transaction failed. Please try again.');\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (checkPhantomWallet()) {\r\n      window.solana.on('connect', (publicKey) => {\r\n        setWalletAddress(publicKey.toString());\r\n        setConnected(true);\r\n      });\r\n\r\n      window.solana.on('disconnect', () => {\r\n        setWalletAddress(null);\r\n        setConnected(false);\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {connected ? (\r\n        <div>\r\n          <p>Your Wallet Address: {walletAddress}</p>\r\n          <button onClick={disconnectWallet}>Disconnect Wallet</button>\r\n          <div>\r\n            <input\r\n              type=\"number\"\r\n              value={amount}\r\n              onChange={(e) => setAmount(e.target.value)}\r\n              min=\"1\"\r\n              placeholder=\"Amount to buy\"\r\n            />\r\n            <button onClick={handleBuyToken}>Buy Token</button>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <button onClick={connectWallet}>Select Wallet</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Wallet;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}